prooph_event_store:
    stores:
        user_store:
            event_store: '@app.event_store.default'
            repositories:
                App\Infrastructure\User\Repository\UserEventRepository:
                    aggregate_type: App\Domain\User
                    aggregate_translator: Prooph\EventSourcing\EventStoreIntegration\AggregateTranslator
                    stream_name: 'user'

    projection_managers:
        user:
            event_store:  '@app.event_store.default'
            connection: '@doctrine.pdo.connection'
            projections:
                user_projection:
                    read_model: App\Domain\Projection\UserReadModel
                    projection: App\Domain\Projection\UserProjection

services:
    _defaults:
        public: false
        autowire: true

    app.event_store.default:
        class: Prooph\EventStore\Pdo\PostgresEventStore
        arguments:
            - '@prooph_event_store.message_factory'
            - '@doctrine.pdo.connection'
            - '@app.event_store.postgres.persistence_strategy'

    doctrine.pdo.connection:
        class: PDO
        factory: ['@database_connection', getWrappedConnection]

    app.event_store.postgres.persistence_strategy:
        class: Prooph\EventStore\Pdo\PersistenceStrategy\PostgresSingleStreamStrategy # Prooph\EventStore\Pdo\PersistenceStrategy\MySqlAggregateStreamStrategy

    Prooph\EventSourcing\EventStoreIntegration\AggregateTranslator: ~

    App\Domain\Repository\UserEventRepositoryInterface: '@App\Infrastructure\User\Repository\UserEventRepository'

    Prooph\EventStoreBusBridge\EventPublisher:
        arguments: ['@prooph_service_bus.user_event_bus']
        public: true
        tags:
          - { name: 'prooph_event_store.user_store.plugin' }

    Prooph\EventStoreBusBridge\CausationMetadataEnricher:
        public: true
        tags:
          - { name: 'prooph_event_store.user_store.plugin' }