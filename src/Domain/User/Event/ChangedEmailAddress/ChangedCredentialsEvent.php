<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace App\Domain\User\Event\ChangedEmailAddress;

final class ChangedCredentialsEvent extends \Prooph\EventSourcing\AggregateChanged
{
    protected $messageName = 'App\Domain\User\Event\ChangedEmailAddress\ChangedCredentialsEvent';

    protected $payload = [];

    private $userId;
    private $email;

    public function userId(): \App\Domain\User\UserId
    {
        if (null === $this->userId) {
            $this->userId = \App\Domain\User\UserId::fromString($this->aggregateId());
        }

        return $this->userId;
    }

    public function email(): \App\Domain\User\ValueObject\Email
    {
        if (null === $this->email) {
            $this->email = \App\Domain\User\ValueObject\Email::fromString($this->payload['email']);
        }

        return $this->email;
    }

    public static function with(\App\Domain\User\UserId $userId, \App\Domain\User\ValueObject\Email $email): ChangedCredentialsEvent
    {
        return new self($userId->toString(), [
            'email' => $email->toString(),
        ]);
    }

    protected function setPayload(array $payload): void
    {
        if (! isset($payload['email']) || ! \is_string($payload['email'])) {
            throw new \InvalidArgumentException("Key 'email' is missing in payload or is not a string");
        }

        $this->payload = $payload;
    }
}
